blueprint:
  name: Kamera Bewegung Benachrichtigung mit Titel, Bild & Ausschluss
  description: |
    Sendet eine Push-Benachrichtigung mit Titel, Nachricht und Bild von der Kamera,
    die Bewegung oder Anwesenheit erkannt hat. Unterstützt eine Ausschlussliste,
    kritische Töne oder lautlose Benachrichtigungen.
  domain: automation

  input:
    included_sensors:
      name: Kamera-Bewegungssensoren
      description: Diese Sensoren lösen die Benachrichtigung aus
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - motion
            - occupancy
          multiple: true

    excluded_sensors:
      name: Ausgeschlossene Sensoren
      description: Diese Sensoren werden ignoriert
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    notify_device:
      name: Zielgerät
      description: Gerät, an das die Benachrichtigung gesendet wird
      selector:
        device:
          integration: mobile_app

    notify_title:
      name: Nachrichtentitel
      description: Titel der Benachrichtigung. Platzhalter wie {{ trigger.entity_id }} möglich.
      default: Bewegung erkannt!
      selector:
        text:

    notify_message:
      name: Nachrichtentext
      description: Nachrichtentext. Platzhalter wie {{ trigger.entity_id }} möglich.
      default: Es wurde Bewegung erkannt bei {{ trigger.entity_id }}
      selector:
        text:

    notify_level:
      name: Benachrichtigungsstil
      description: Ton, Lautstärke oder lautlos
      default: normal
      selector:
        select:
          options:
            - normal
            - kritisch
            - lautlos

mode: parallel

trigger:
  - platform: state
    entity_id: !input included_sensors
    to: "on"

variables:
  excluded: !input excluded_sensors
  notify_service: >
    notify.mobile_app_{{ device_attr(notify_device, 'name') | lower | replace(" ", "_") }}
  message: "{{ notify_message }}"
  title: "{{ notify_title }}"
  sensor_entity: "{{ trigger.entity_id }}"
  camera_entity: >
    {{ 'camera.' + sensor_entity.split('.')[1].replace('_motion','').replace('_occupancy','') }}
  snapshot_path: "/config/www/snapshots/{{ camera_entity | replace('.', '_') }}.jpg"
  snapshot_url: "{{ snapshot_path | replace('/config/www', '/local') }}"

condition:
  - condition: template
    value_template: >
      {{ sensor_entity not in excluded }}

action:
  - service: camera.snapshot
    data:
      entity_id: "{{ camera_entity }}"
      filename: "{{ snapshot_path }}"

  - delay: "00:00:01"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ notify_level == 'kritisch' }}"
        sequence:
          - service: "{{ notify_service }}"
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                push:
                  sound:
                    name: default
                    critical: 1
                    volume: 1.0
                image: "{{ snapshot_url }}"
      - conditions:
          - condition: template
            value_template: "{{ notify_level == 'lautlos' }}"
        sequence:
          - service: "{{ notify_service }}"
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                push:
                  sound: none
                image: "{{ snapshot_url }}"
    default:
      - service: "{{ notify_service }}"
        data:
          title: "{{ title }}"
          message: "{{ message }}"
          data:
            image: "{{ snapshot_url }}"
